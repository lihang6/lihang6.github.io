(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{611:function(a,t,s){"use strict";s.r(t);var n=s(15),r=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"关键字标识符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关键字标识符"}},[a._v("#")]),a._v(" 关键字标识符")]),a._v(" "),s("p",[a._v("代码中的public、class、static、void都是"),s("strong",[a._v("关键字")]),a._v("，关键字都是小写的，在Java开发工具中，针对关键字会有特殊颜色的标记。")]),a._v(" "),s("p",[a._v("Java中有几十个关键字，我们不需要背诵这些关键字。随着学习的深入，我们会接触够多的关键字。")]),a._v(" "),s("p",[a._v("标识符是开发人员自己定义的单词，例如我们创建一个字符串变量：")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello world"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("在上面的代码中，我们创建了一个字符串类型的str变量，并将一个hello world字符串赋值给了str（变量会在下一章详细讲解）。这里的变量str就是一个标识符，这个名字是开发人员自己定义的，虽然可以随意给标识符命名，但是在Java中，还是要遵循一定的规则：")]),a._v(" "),s("ul",[s("li",[a._v("标识符有数字、字母、下划线、美元符号$构成，其他符号不可以在标识符中出现。")]),a._v(" "),s("li",[a._v("必须以字母、下划线、美元符号$开头，不能以数字开头。")]),a._v(" "),s("li",[a._v("关键字不能作为标识符")]),a._v(" "),s("li",[a._v("标识符区分大小写，理论上没有长度限制")])]),a._v(" "),s("p",[a._v("虽然满足上面要求，标识符的命名就是合法的（编译器不会报错），但是命名标识符的时候，还是要做到见名知意。例如创建一个猫的类，可以叫Cat，也可以叫Abc。为了让程序让人更容易理解，推荐使用见名知意的命名（Cat）。")]),a._v(" "),s("h2",{attrs:{id:"变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[a._v("#")]),a._v(" 变量")]),a._v(" "),s("p",[a._v("定义变量的语法如下所示：")]),a._v(" "),s("blockquote",[s("p",[a._v("数据类型 变量名 = 变量值;")])]),a._v(" "),s("blockquote",[s("p",[a._v("数据类型 变量名;\n变量名 = 变量值;")])]),a._v(" "),s("ul",[s("li",[a._v("数据类型：明确变量是一个什么类型的数据，关于数据类型本章会继续讨论。")]),a._v(" "),s("li",[a._v("变量名：用一个标识符表示这个标签。")]),a._v(" "),s("li",[a._v("变量值：可以使字面量，也可以是另一个标量，也可以是表达式或者函数返回值（后续课程会详细讲解）。")])]),a._v(" "),s("p",[a._v("例如下面的案例：")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello world"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[a._v('上面的代码表示，声明一个字符串变量str，并且将"hello world"这个字符串赋值给str，然后再控制台输出这个变量的值。运行后我们会在控制台看到"hello world"。')]),a._v(" "),s("h2",{attrs:{id:"为什么要定义变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要定义变量"}},[a._v("#")]),a._v(" 为什么要定义变量")]),a._v(" "),s("p",[a._v("变量其实就是内存中的一块空间，这块空间有【类型】【名字】和【值】，它可以用来存放统一类型的值，并且可以重复使用。")]),a._v(" "),s("p",[a._v("基本数据类型")]),a._v(" "),s("h2",{attrs:{id:"为什么要定义数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要定义数据类型"}},[a._v("#")]),a._v(" 为什么要定义数据类型")]),a._v(" "),s("p",[a._v("数据类型就是变量名。数据类型在计算机语言里面，是对内存位置的一个抽象表达方式，可以理解为针对内存的一种抽象的表达方式。接触每种语言的时候，都会存在数据类型的认识，有复杂的、简单的，各种数据类型都需要在学习初期去了解，Java是强类型语言，所以Java对于数据类型的规范会相对严格。数据类型是语言的抽象原子概念，可以说是语言中"),s("strong",[a._v("最基本的单元定义")]),a._v("，在Java里面，本质上讲将数据类型分为两种：基本数据类型和引用数据类型。")]),a._v(" "),s("p",[a._v("上一部分我们已经说了，变量其实就是内存中的一块空间。我们在内存中存放数据之前需要先开辟一块空间，通过指定数据类型，我们就可以指定这个空间尺寸的大小。")]),a._v(" "),s("p",[a._v("例如我们想存一个数字1，就可以开辟一个较小的空间，可以使用bype数据类型。如果想存储一个数字1000000。那么byte这么小的空间就装不下这么大的数据，所以需要使用int数据类型。")]),a._v(" "),s("p",[a._v("当然，我们也可以将1这个数据存放在int类型中，数据可以正常保存，但是会产生不必要的浪费。如果我们将1000000这个数字保存为bype类型，这样的程序会报错，如果我们要强硬地将1000000转换成bype类型，会出现数据溢出的情况，导致数据失真。")]),a._v(" "),s("h2",{attrs:{id:"基本数据类型的特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型的特性"}},[a._v("#")]),a._v(" 基本数据类型的特性")]),a._v(" "),s("p",[a._v("在Java语言中有两种数据类型：【基本数据类型】和【引用数据类型】，基本类型：简单数据类型是不能简化的、内置的数据类型、由编程语言本身定义，它表示了真实的数字、字符和整数。引用数据类型我们会在第六章详细的讲解，本节主要讲解基本数据类型。")]),a._v(" "),s("p",[a._v("Java语言中的基本数据类型可以分为四类八种，下面我们来介绍这八种数据类型，以及它们在内存中的占位情况：")]),a._v(" "),s("ul",[s("li",[a._v("整数型\n"),s("ul",[s("li",[a._v("byte占一个字节")]),a._v(" "),s("li",[a._v("short占两个字节")]),a._v(" "),s("li",[a._v("int占四个字节")]),a._v(" "),s("li",[a._v("long占八个字节")])])]),a._v(" "),s("li",[a._v("浮点型\n"),s("ul",[s("li",[a._v("float占四个字节")]),a._v(" "),s("li",[a._v("double占八个字节")])])]),a._v(" "),s("li",[a._v("字符型\n"),s("ul",[s("li",[a._v("char占两个字节，可以是一个字母，一个符号或一个汉字。")])])]),a._v(" "),s("li",[a._v("布尔型\n"),s("ul",[s("li",[a._v("boolean：true和false")])])])]),a._v(" "),s("p",[a._v("数据类型及对照变如下所示：")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("数据类型")]),a._v(" "),s("th",[a._v("字节数")]),a._v(" "),s("th",[a._v("二进制位数")]),a._v(" "),s("th",[a._v("范围")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("byte")]),a._v(" "),s("td",[a._v("1")]),a._v(" "),s("td",[a._v("8")]),a._v(" "),s("td",[a._v("-128～127")])]),a._v(" "),s("tr",[s("td",[a._v("short")]),a._v(" "),s("td",[a._v("2")]),a._v(" "),s("td",[a._v("16")]),a._v(" "),s("td",[a._v("-32768～32767")])]),a._v(" "),s("tr",[s("td",[a._v("int")]),a._v(" "),s("td",[a._v("4")]),a._v(" "),s("td",[a._v("32")]),a._v(" "),s("td",[a._v("-2147483648～2147483647")])]),a._v(" "),s("tr",[s("td",[a._v("long")]),a._v(" "),s("td",[a._v("8")]),a._v(" "),s("td",[a._v("64")]),a._v(" "),s("td",[a._v("-9223372036854775808 ~ 9223372036854775807")])]),a._v(" "),s("tr",[s("td",[a._v("float")]),a._v(" "),s("td",[a._v("4")]),a._v(" "),s("td",[a._v("32")]),a._v(" "),s("td",[a._v("1.4E-45~3.4028235E38")])]),a._v(" "),s("tr",[s("td",[a._v("double")]),a._v(" "),s("td",[a._v("8")]),a._v(" "),s("td",[a._v("64")]),a._v(" "),s("td",[a._v("4.9E-324~1.7976931348623157E308")])]),a._v(" "),s("tr",[s("td",[a._v("char")]),a._v(" "),s("td",[a._v("2")]),a._v(" "),s("td",[a._v("16")]),a._v(" "),s("td",[a._v("0～65535")])]),a._v(" "),s("tr",[s("td",[a._v("boolean")]),a._v(" "),s("td",[a._v("1")]),a._v(" "),s("td",[a._v("8")]),a._v(" "),s("td",[a._v("true或false")])])])]),a._v(" "),s("blockquote",[s("p",[a._v("我们之前接触到的字符串类型（String）属于引用数据类型。")])]),a._v(" "),s("p",[a._v("在定义变量的时候，我们需要明确指定变量的数据类型，如果变量是一个基本数据类型，那么变量在内存中占用的存储空间就可以确定，我们可以把不同的数据放入相应数据类型的变量中，这样就不会产生资源的浪费。")]),a._v(" "),s("h2",{attrs:{id:"整数型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#整数型"}},[a._v("#")]),a._v(" 整数型")]),a._v(" "),s("p",[a._v("整数型的默认类型int类型")]),a._v(" "),s("p",[a._v("例如整数10000，可以放到short类型的变量中，整数1000000可以放到int数据类型中。")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("short")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1000000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("h2",{attrs:{id:"浮点型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浮点型"}},[a._v("#")]),a._v(" 浮点型")]),a._v(" "),s("p",[a._v("浮点型的默认类型double类型，可以把小数放到浮点型的数据类型中。float类型变量值后加F 表示这个变量是float类型变量 是一种数字精度表示法。如果不加会报错。")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3.14")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("float")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.2F")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("h2",{attrs:{id:"字符型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符型"}},[a._v("#")]),a._v(" 字符型")]),a._v(" "),s("p",[a._v("char是字符型，占两个字节，可以是一个字母，一个符号或一个汉字。如果多个字符就成字符串了会报错。")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("char")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[a._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("char")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[a._v("'小'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("h2",{attrs:{id:"布尔型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#布尔型"}},[a._v("#")]),a._v(" 布尔型")]),a._v(" "),s("p",[a._v("boolean的取值范围只有true和false，布尔型主要应用于逻辑运算和条件判断中，现在知道有布尔值即可，后面的章节会应用。")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("下一节我们会运用这些基本数据类型做一些常见的运算。")]),a._v(" "),s("h2",{attrs:{id:"类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[a._v("#")]),a._v(" 类型转换")]),a._v(" "),s("p",[a._v("在开发的过程中，我们经常遇到类型转换的情况，例如上面的代码中，如果我们希望输出a和b之和，就会涉及到类型转换的概念。类型转换可以分为自动类型转换和强制类型转换。")]),a._v(" "),s("h3",{attrs:{id:"基本类型的自动类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本类型的自动类型转换"}},[a._v("#")]),a._v(" 基本类型的自动类型转换")]),a._v(" "),s("p",[a._v("八种基本数据类型除了布尔型之外都可以互相转换，在转型时程序会默认的吧整型的字面量当成int类型，小容量向大容量转换的时候叫自动类型转换。")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("short")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1000000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("p",[a._v("在上面的代码中，c是int类型，a是short类型，在相加的过程中，short类型自动向上转换成了int类型。输出的结果是1010000，并不会出现计算上的问题。")]),a._v(" "),s("h3",{attrs:{id:"基本类型的强制类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本类型的强制类型转换"}},[a._v("#")]),a._v(" 基本类型的强制类型转换")]),a._v(" "),s("p",[a._v("我们还可以强制将数据类型向下转换，大容量向小容量转换叫强制类型转换，例如下面的代码。")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("强制类型转换"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("强制编译器进行类型转换，必须在程序中编写代码。\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1000000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("short")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("p",[a._v("short类型在内存中存放的最大值是32767，所以1000000会出现溢出的情况，输出的值是16960，向下的转型如果出现溢出，会导致结果失真，所以大家在开发的过程中，要避免这种情况的发生，如果不确定变量存储值的尺寸，可以使用范围稍微广一些的数据类型。")])])}),[],!1,null,null,null);t.default=r.exports}}]);